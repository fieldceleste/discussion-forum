{"version":3,"sources":["components/Header.js","components/NewPostForm.js","components/Post.js","components/PostList.js","components/PostDetail.js","actions/index.js","components/PostControl.js","actions/ActionTypes.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/form-visible-reducer.js","reducers/post-list-reducer.js","reducers/selected-post-reducer.js","index.js"],"names":["Header","Fragment","src","className","NewPostForm","props","onSubmit","event","preventDefault","onNewPostCreation","id","v4","username","target","value","post","type","name","placeholder","Post","timestamp","onClick","whenUpvoteClicked","upvotes","whenDownvoteClicked","downvotes","whenPostClicked","PostList","Object","values","postList","sort","a","b","map","onUpvoteClick","onDownvoteClick","onPostClick","PostDetail","mainPost","onClickingDelete","Date","now","formattedTime","Intl","DateTimeFormat","year","month","day","hour","minute","format","PostControl","masterPostList","formVisibleOnPage","selectedPost","handleFormClick","dispatch","handleDetailNull","buttonText","buttonPage","currentlyVisibleState","newPost","console","log","idDetail","filter","upvoteObject","downvoteObject","connect","state","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","currentTime","assign","newUpvoteState","voteUp","newDownvoteState","voteDown","newState","store","createStore","subscribe","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gQAeeA,MAbf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,4BACE,yBAAKC,IAAK,gBAAgBC,UAAU,SADtC,kBAGE,yBAAKD,IAAK,gBAAgBC,UAAU,UAEtC,uD,QC2BSC,MAjCf,SAAqBC,GAWnB,OACE,kBAAC,IAAMJ,SAAP,KACE,0BAAMK,SAXV,SAAqCC,GACnCA,EAAMC,iBACNH,EAAMI,kBAAkB,CACtBC,GAAIC,eACJC,SAAUL,EAAMM,OAAOD,SAASE,MAChCC,KAAMR,EAAMM,OAAOE,KAAKD,UAOtB,2BACEE,KAAK,OACLC,KAAK,WACLC,YAAY,aACd,6BACA,8BACED,KAAK,OACLC,YAAY,yBACd,6BACA,4BAAQf,UAAU,mBAAmBa,KAAK,UAA1C,aCUOG,MAlCf,SAAcd,GACZ,OACE,kBAAC,IAAMJ,SAAP,KAEE,oCAAUI,EAAMO,UAChB,uBAAGT,UAAU,cAAcE,EAAMe,WACjC,6BACA,yBAAKjB,UAAW,aACd,wBAAIA,UAAU,aAAaE,EAAMU,OAEnC,2BACE,yBAAKb,IAAK,iBAAiBmB,QAAW,kBAAMhB,EAAMiB,kBAAkBjB,IAAQF,UAAW,aAAaa,KAAK,WACzG,0BAAMb,UAAY,WAAlB,IAA8BE,EAAMkB,QAApC,KACA,yBAAKrB,IAAI,mBAAmBmB,QAAW,kBAAMhB,EAAMmB,oBAAoBnB,IAAQF,UAAW,gBAAgBa,KAAK,WAC/G,0BAAMb,UAAY,WAAlB,IAA8BE,EAAMoB,UAApC,MAEF,4BAAQtB,UAAU,oBAAoBkB,QAAW,kBAAMhB,EAAMqB,gBAAgBrB,EAAMK,KAAKM,KAAK,UAA7F,gBACA,6BACA,+BCcSW,MA/Bf,SAAkBtB,GAChB,OACE,kBAAC,IAAMJ,SAAP,KACA,6BACG2B,OAAOC,OAAOxB,EAAMyB,UACpBC,MAAK,SAASC,EAAGC,GAChB,OAAOA,EAAEV,QAAUS,EAAET,WAEtBW,KAAI,SAACnB,GACJ,OAAO,kBAAC,EAAD,CACPO,kBAAqBjB,EAAM8B,cAC3BX,oBAAuBnB,EAAM+B,gBAC7BV,gBAAmBrB,EAAMgC,YACzBzB,SAAUG,EAAKH,SACfF,GAAMK,EAAKL,GACXK,KAAQA,EAAKA,KACbQ,QAAWR,EAAKQ,QAChBE,UAAaV,EAAKU,UAClBL,UAAaL,EAAKK,iBCQXkB,MA3Bf,SAAoBjC,GAAO,IACjBkC,EAA+BlC,EAA/BkC,SAAUC,EAAqBnC,EAArBmC,iBAClB,OAEE,kBAAC,IAAMvC,SAAP,KACA,6BACA,4BAAI,6CACJ,oCAAUsC,EAAS3B,UACnB,uBAAGT,UAAU,cAAcoC,EAASnB,WACpC,6BACA,yBAAKjB,UAAW,aAChB,wBAAIA,UAAU,aAAaoC,EAASxB,OAEpC,uCAAawB,EAAShB,SACtB,yCAAegB,EAASd,WACxB,4BAAQtB,UAAU,mBAAmBkB,QAAS,kBAAMmB,EAAiBD,EAAS7B,MAA9E,eACA,+B,OCjBEU,EAAYqB,KAAKC,MACjBC,EAAiB,IAAIC,KAAKC,eAAe,QAAS,CAACC,KAAM,UAAWC,MAAO,UAAUC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,YAAYC,OAAO/B,GCKjJA,EAAYqB,KAAKC,MACA,IAAIE,KAAKC,eAAe,QAAS,CAACC,KAAM,UAAWC,MAAO,UAAUC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,YAAYC,OAAO/B,GAEvJ,SAASgC,EAAY/C,GACyCA,EAApDgD,eAAoDhD,EAApCiD,kBAAoCjD,EAAjBkD,aAE3C,SAASC,KAGPC,EAFmBpD,EAAZoD,UDkCsB,CAC/BzC,KEjDyB,gBDuC1B,IA8BO0C,EAAmB,YAKvBD,EAJmBpD,EAAZoD,UACQ,CACbzC,KAAM,iBAQJ2C,EAAa,KACbC,EAAa,KACbC,EAAwB,KA0B5B,OAxBIxD,EAAMiD,mBACRO,EAAwB,kBAAC,EAAD,CACxBpD,kBAlE8B,SAACqD,GAAY,IACtCL,EAAYpD,EAAZoD,SAC0CK,EAA1CpD,GAA0CoD,EAAtC/C,KAAsC+C,EAAhClD,SAAgCkD,EAAtBvC,QAAsBuC,EAAbrC,UAEpCgC,EDpBmB,SAAClB,GAAc,IAC7B3B,EAAsB2B,EAAtB3B,SAAUG,EAAYwB,EAAZxB,KAAML,EAAM6B,EAAN7B,GACvB,MAAO,CACLM,KERoB,WFSpBJ,SAAUA,EACVG,KAAMA,EACNQ,QAAS,EACTE,UAAW,EACXL,UAAWuB,EACXjC,GAAIA,GCUWsB,CAAU8B,IAGzBL,EDsB6B,CAC/BzC,KEjDyB,mBDuFrB2C,EAAa,sBACbC,EAAaJ,GAEmB,OAAvBnD,EAAMkD,cACfQ,QAAQC,IAAI3D,EAAMkD,cAClBM,EAAwB,kBAAC,EAAD,CACxBtB,SAAYlC,EAAMkD,aAClBf,iBAhEJ,SAA4B9B,GAC1BgD,KAGAD,EAFmBpD,EAAZoD,UDWe,SAAC/C,GAAD,MAAS,CACjCM,KEzCyB,cF0CzBN,MCZiBsB,CAAatB,OA8D1BiD,EAAY,kBACZC,EAAaF,IAGbG,EAAwB,kBAAC,EAAD,CACxB/B,SAAUzB,EAAMgD,eAChBhB,YAhDsB,SAAC4B,GAAc,IAChCR,EAAYpD,EAAZoD,SACDF,EAAe3B,OAAOC,OAAOxB,EAAMgD,gBAAgBa,QAAO,SAAAnD,GAAI,OAAIA,EAAKL,KAAOuD,KAAU,GACvFvD,EAAqD6C,EAArD7C,GAAIK,EAAiDwC,EAAjDxC,KAUX0C,EATe,CACbzC,KAAM,cACNN,GAAIA,EACJE,SAJ0D2C,EAA3C3C,SAKfG,KAAMA,EACNQ,QAN0DgC,EAAjChC,QAOzBE,UAP0D8B,EAAxB9B,UAQlCL,UAR0DmC,EAAbnC,aA8C7Ce,cA/D0B,SAACgC,IAG7BV,EAFmBpD,EAAZoD,UDvBW,SAAClB,GAAc,IAC5B3B,EAAqD2B,EAArD3B,SAAUG,EAA2CwB,EAA3CxB,KAAMQ,EAAqCgB,EAArChB,QAASE,EAA4Bc,EAA5Bd,UAAWL,EAAiBmB,EAAjBnB,UAC3C,MAAM,CACLJ,KEnBwB,cFoBxBJ,SAAUA,EACVG,KAAMA,EACNL,GAL2D6B,EAAN7B,GAMrDa,QAASA,EACTE,UAAWA,EACXL,UAAWA,GCeKY,CAASmC,KA8DtB/B,gBAzD6B,SAACgC,IAGhCX,EAFmBpD,EAAZoD,UDjBa,SAAClB,GAAc,IAC9B3B,EAAqD2B,EAArD3B,SAAUG,EAA2CwB,EAA3CxB,KAAMQ,EAAqCgB,EAArChB,QAASE,EAA4Bc,EAA5Bd,UAAWL,EAAiBmB,EAAjBnB,UAC3C,MAAM,CACLJ,KE/B0B,gBFgC1BJ,SAAUA,EACVG,KAAMA,EACNL,GAL2D6B,EAAN7B,GAMrDa,QAASA,EACTE,UAAWA,EACXL,UAAWA,GCSKY,CAAWoC,OAwDxBT,EAAY,WACZC,EAAaJ,GAIb,kBAAC,IAAMvD,SAAP,KACG4D,EACD,6BACA,4BAAQ1D,UAAU,SAASkB,QAASuC,GAAaD,IAazD,IAUeP,EAFfA,EAAciB,aARU,SAAAC,GACtB,MAAO,CACLjB,eAAgBiB,EAAMjB,eACtBC,kBAAmBgB,EAAMhB,kBACzBC,aAAce,EAAMf,gBAIVc,CAAyBjB,GEtHxBmB,MATf,WACE,OACA,kBAAC,IAAMtE,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCgBuE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCNSC,EANKC,YAAgB,CAClCxB,kBCLa,WAA4B,IAA3BgB,EAA0B,wDAAXS,EAAW,uCACxC,OAAQA,EAAO/D,MACb,IJHuB,cIIvB,OAAQsD,EACR,QACE,OAAOA,IDCXjB,eENa,WAAyB,IAAxBiB,EAAuB,uDAAf,GAAIS,EAAW,uCAC9BnE,EAAqDmE,EAArDnE,SAAUG,EAA2CgE,EAA3ChE,KAAMQ,EAAqCwD,EAArCxD,QAASE,EAA4BsD,EAA5BtD,UAAWL,EAAiB2D,EAAjB3D,UAAWV,EAAMqE,EAANrE,GACtD,OAAOqE,EAAO/D,MACZ,ILLoB,WKMlB,IAAMgE,EAAcvC,KAAKC,MACnBC,EAAiB,IAAIC,KAAKC,eAAe,QAAS,CAACC,KAAM,UAAWC,MAAO,UAAUC,IAAK,UAAWC,KAAM,UAAWC,OAAQ,YAAYC,OAAO6B,GAEvJ,OAAOpD,OAAOqD,OAAO,GAAIX,EAAlB1C,OAAA,IAAAA,CAAA,GACJlB,EAAK,CACJA,GAAIA,EACJE,SAAUA,EACVG,KAAMA,EACNQ,QAAS,EACTE,UAAW,EACXL,UAAWuB,KAIf,ILlBqB,cKmBnB,IAAMuC,EAAc,eAAQZ,GACxBa,EAASD,EAAexE,GAAIa,QAAU,EAE1C,OAAOK,OAAOqD,OAAO,GAAKX,EAAnB1C,OAAA,IAAAA,CAAA,GACJlB,EAAM,CACLA,GAAIA,EACJE,SAAUA,EACVG,KAAMA,EACNU,UAAWA,EACXL,UAAWA,EACXG,QAAS4D,KAGhB,IL/BwB,gBKgCtB,IAAMC,EAAgB,eAAQd,GAC1Be,EAAWD,EAAiB1E,GAAIe,UAAW,EAE/C,OAAOG,OAAOqD,OAAO,GAAKX,EAAnB1C,OAAA,IAAAA,CAAA,GACJlB,EAAK,CACJA,GAAIA,EACJE,SAAUA,EACVG,KAAMA,EACNU,UAAW4D,EACXjE,UAAWA,EACXG,QAASA,KAGd,IL5CqB,cK6CnB,IAAM+D,EAAQ,eAAQhB,GAEtB,cADOgB,EAAS5E,GACT4E,EAEX,QACE,OAAOhB,IF7CXf,aGPa,WAA2B,IAA1Be,EAAyB,uDAAjB,KAAMS,EAAW,uCAChCnE,EAAqDmE,EAArDnE,SAAUG,EAA2CgE,EAA3ChE,KAAMQ,EAAqCwD,EAArCxD,QAASE,EAA4BsD,EAA5BtD,UAAWL,EAAiB2D,EAAjB3D,UAAWV,EAAMqE,EAANrE,GACtD,OAAQqE,EAAO/D,MACb,INAuB,cMCrB,OAAa,OAAVsD,EACM,CACH5D,GAAIA,EACJE,SAAUA,EACVG,KAAMA,EACNU,UAAWA,EACXL,UAAWA,EACXG,QAASA,GAGb+C,EAAQ,KAGZ,QACE,OAAOA,MCXPiB,EAAQC,YAAYX,GAC1BU,EAAME,WAAU,kBACf1B,QAAQC,IAAIuB,EAAMG,eAGnBC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SLiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.060a7d7a.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return(\n    <React.Fragment>\n      <h1>\n        <img src= \"./../bomb.gif\" className='bomb'/>\n         REACT RAGE ROOM\n        <img src= \"./../bomb.gif\" className='bomb'/>\n      </h1>\n      <p>Rant about React here!</p>\n    </React.Fragment>\n  );\n}\n\nexport default Header;\n\n","import React from \"react\";\nimport { v4 } from \"uuid\";\nimport PropTypes from \"prop-types\";\n\nfunction NewPostForm(props) {\n  \n  function handleNewPostFormSubmission(event) {\n    event.preventDefault();\n    props.onNewPostCreation({\n      id: v4(),\n      username: event.target.username.value,\n      post: event.target.post.value\n    });\n  }\n\n  return(\n    <React.Fragment>\n      <form onSubmit={handleNewPostFormSubmission}>\n        <input\n          type='text'\n          name='username'\n          placeholder='username' />\n        <br/>\n        <textarea\n          name='post'\n          placeholder='Write your post here' />\n        <br/>\n        <button className=\"button btnsubmit\" type='submit'>Submit</button>\n      </form>\n    </React.Fragment>\n  )\n}\n\nNewPostForm.propTypes = {\n  onNewPostCreation: PropTypes.func\n}\n\nexport default NewPostForm","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Post(props){\n  return (\n    <React.Fragment>\n      \n      <h3>User-{props.username}</h3>\n      <p className=\"time-stamp\">{props.timestamp}</p>\n      <br />\n      <div className= \"borderBox\">\n        <li className=\"paragraph\">{props.post}</li>\n      </div>\n      <p>\n        <img src= \"./../heart.png\" onClick = {() => props.whenUpvoteClicked(props)} className= \"likeButton\" type=\"submit\"/>\n        <span className = \"counter\"> {props.upvotes} </span>\n        <img src=\"./../dislike.jpg\" onClick = {() => props.whenDownvoteClicked(props)} className= \"dislikeButton\" type=\"submit\" />\n        <span className = \"counter\"> {props.downvotes} </span>\n      </p>\n      <button className=\"button btndetails\" onClick = {() => props.whenPostClicked(props.id)} type=\"submit\">View Details</button>\n      <br />\n      <br />\n    </React.Fragment>\n  )\n}\n\nPost.propTypes = {\n  username: PropTypes.string,\n  post:PropTypes.string,\n  timestamp: PropTypes.string,\n  upvotes: PropTypes.number,\n  downvotes:PropTypes.number,\n  whenPostClicked: PropTypes.func,\n  whenUpvoteClicked: PropTypes.func,\n  whenDownvoteClicked: PropTypes.func\n}\n\nexport default Post;\n\n","import React from 'react';\nimport Post from './Post';\nimport PropTypes from 'prop-types';\n\nfunction PostList(props) {\n  return(\n    <React.Fragment>\n    <hr />\n      {Object.values(props.postList)\n      .sort(function(a, b) {\n        return b.upvotes - a.upvotes;\n      })\n      .map((post) => {\n        return <Post \n        whenUpvoteClicked = {props.onUpvoteClick}\n        whenDownvoteClicked = {props.onDownvoteClick}\n        whenPostClicked = {props.onPostClick}\n        username={post.username}\n        id = {post.id}\n        post = {post.post}\n        upvotes = {post.upvotes}\n        downvotes = {post.downvotes} \n        timestamp = {post.timestamp} />\n      })}\n    </React.Fragment>\n  )\n}\n\nPostList.propTypes = {\n  postList: PropTypes.object,\n  onUpvoteClick: PropTypes.func,\n  onDownvoteClick: PropTypes.func,\n  onPostClick: PropTypes.func\n}\n\nexport default PostList;\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction PostDetail(props){\n  const { mainPost, onClickingDelete } = props;\n  return (\n \n    <React.Fragment>\n    <hr /> \n    <h2><u>Post Details:</u></h2>\n    <h2>User-{mainPost.username}</h2>\n    <p className=\"time-stamp\">{mainPost.timestamp}</p>\n    <br />\n    <div className= \"borderBox\">\n    <li className=\"paragraph\">{mainPost.post}</li>\n    </div>\n    <p>UpVotes: {mainPost.upvotes}</p>\n    <p>DownVotes: {mainPost.downvotes}</p>\n    <button className=\"button btnsubmit\" onClick={() => onClickingDelete(mainPost.id)}>Remove Post</button>\n    <br />\n    </React.Fragment>\n   \n  );;\n}\n\nPostDetail.propTypes = {\n  mainPost: PropTypes.object,\n  onClickingDelete: PropTypes.func\n};\n\nexport default PostDetail;","import * as c from './ActionTypes';\n\nconst timestamp = Date.now();\nconst formattedTime =  new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit'}).format(timestamp);\n\nexport const addPost = (mainPost) => {\n  const {username, post, id} = mainPost;\n  return {\n    type: c.ADD_POST,\n    username: username,\n    post: post,\n    upvotes: 0,\n    downvotes: 0,\n    timestamp: formattedTime,\n    id: id\n  }\n}\n\nexport const voteUp = (mainPost) => {\n  const {username, post, upvotes, downvotes, timestamp, id} = mainPost;\n  return{\n   type: c.UPVOTE_POST,\n   username: username,\n   post: post,\n   id:id,\n   upvotes: upvotes,\n   downvotes: downvotes,\n   timestamp: timestamp\n  }\n}\n\nexport const voteDown = (mainPost) => {\n  const {username, post, upvotes, downvotes, timestamp, id} = mainPost;\n  return{\n   type: c.DOWNVOTE_POST,\n   username: username,\n   post: post,\n   id:id,\n   upvotes: upvotes,\n   downvotes: downvotes,\n   timestamp: timestamp\n  }\n}\n\nexport const deletePost = (id) => ({\n  type: c.DELETE_POST,\n  id\n});\n\nexport const toggleForm = () => ({\n  type: c.TOGGLE_FORM\n})\n\nexport const selectPost =(mainPost) => {\n  if (mainPost!= null) {\n  const {username, post, upvotes, downvotes, timestamp, id} = mainPost;\n  return{\n   type: c.SELECT_POST,\n   username: username,\n   post: post,\n   id:id,\n   upvotes: upvotes,\n   downvotes: downvotes,\n   timestamp: timestamp\n  }\n} else {\n  return {\n    type: c.SELECT_POST\n  }\n}\n}","import React from 'react';\nimport NewPostForm from './NewPostForm';\nimport PostList from './PostList';\nimport PostDetail from './PostDetail';\nimport  { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport * as a from './../actions';\n\nconst timestamp = Date.now();\nconst formattedTime =  new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit'}).format(timestamp);\n\nfunction PostControl(props) {\n  const { masterPostList, formVisibleOnPage, selectedPost } = props;\n\n  function handleFormClick() {\n    const {dispatch} = props;\n    const action = a.toggleForm();\n    dispatch(action);\n  }\n  \n  // for adding new post\n  const handleAddingNewPostToList = (newPost) =>{\n    const {dispatch} = props;\n    const {id, post, username, upvotes, downvotes} = newPost;\n    const action = a.addPost(newPost);\n    dispatch(action);\n    const action2 = a.toggleForm();\n    dispatch(action2)\n  }\n\n  // for deleting post\n  function handleDeletingPost(id){\n    handleDetailNull();\n    const {dispatch} = props;\n    const action = a.deletePost(id);\n    dispatch(action);\n  }\n\n\n// up vote button \n const handleWhenUpVoteClicked =(upvoteObject) =>{\n    const {dispatch} = props;\n    const action = a.voteUp(upvoteObject)\n    dispatch(action);\n  }\n\n  // down vote button\n  const handleWhenDownVoteClicked =(downvoteObject) =>{\n    const {dispatch} = props;\n    const action = a.voteDown(downvoteObject)\n    dispatch(action);\n  }\n\n  // details of post\n  const handleDetailClick = (idDetail) => {\n    const {dispatch} = props;\n    const selectedPost = Object.values(props.masterPostList).filter(post => post.id === idDetail)[0];\n    const {id, post, username, upvotes, downvotes, timestamp} = selectedPost;\n    const action = {\n      type: \"SELECT_POST\",\n      id: id,\n      username: username,\n      post: post,\n      upvotes: upvotes,\n      downvotes: downvotes,\n      timestamp: timestamp\n    }\n    dispatch(action);\n  }\n\n  const handleDetailNull = () => {\n    const {dispatch} = props;\n    const action = {\n      type: \"SELECT_POST\"\n    }\n    dispatch(action);\n  }\n  \n  \n ///render \n  \n    let buttonText = null;\n    let buttonPage = null;\n    let currentlyVisibleState = null;\n\n    if (props.formVisibleOnPage) {\n      currentlyVisibleState = <NewPostForm \n      onNewPostCreation = { handleAddingNewPostToList } />\n      buttonText = \"Return to Post list\";\n      buttonPage = handleFormClick;\n      \n    } else if (props.selectedPost !== null) {\n      console.log(props.selectedPost);\n      currentlyVisibleState = <PostDetail\n      mainPost = {props.selectedPost}\n      onClickingDelete= {handleDeletingPost}/>\n      buttonText= \"Return To Posts\" \n      buttonPage = handleDetailNull;\n      \n    } else {\n      currentlyVisibleState = <PostList \n      postList={props.masterPostList} \n      onPostClick = { handleDetailClick }\n      onUpvoteClick = { handleWhenUpVoteClicked }\n      onDownvoteClick = { handleWhenDownVoteClicked } />\n      buttonText= \"Add Post\";\n      buttonPage = handleFormClick;\n    }\n\n    return (\n      <React.Fragment> \n        {currentlyVisibleState}\n        <br></br>\n        <button className=\"button\" onClick={buttonPage}>{buttonText}</button>\n      </React.Fragment> \n    );\n  }\n\n\n\nPostControl.propTypes = {\n  masterPostList: PropTypes.object,\n  selectedPost: PropTypes.object,\n  formVisibleOnPage: PropTypes.bool\n};\n\nconst mapStateToProps = state => {\n  return {\n    masterPostList: state.masterPostList,\n    formVisibleOnPage: state.formVisibleOnPage,\n    selectedPost: state.selectedPost\n  }\n}\n\nPostControl = connect(mapStateToProps)(PostControl);\n\nexport default PostControl;","export const ADD_POST = \"ADD_POST\";\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\nexport const UPVOTE_POST = 'UPVOTE_POST';\nexport const DOWNVOTE_POST = 'DOWNVOTE_POST';\nexport const DELETE_POST = 'DELETE_POST';\nexport const SELECT_POST = 'SELECT_POST';","import React from 'react';\nimport '../App.css';\nimport Header from \"./Header\";\nimport PostControl from \"./PostControl\";\n\n\n\nfunction App() {\n  return (\n  <React.Fragment>\n    <Header />\n    <PostControl />\n  </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import postListReducer from './post-list-reducer';\nimport formVisibleReducer from './form-visible-reducer';\nimport selectedPostReducer from './selected-post-reducer';\nimport { combineReducers } from 'redux';\n\n\nconst rootReducer = combineReducers({\n  formVisibleOnPage: formVisibleReducer,\n  masterPostList: postListReducer,\n  selectedPost: selectedPostReducer\n});\n\nexport default rootReducer;","import * as c from './../actions/ActionTypes';\n\nexport default (state = false, action) => {\n  switch (action.type){\n    case c.TOGGLE_FORM:\n    return !state;\n    default:\n      return state;\n  }\n};","import * as c from './../actions/ActionTypes';\n\nexport default (state = {}, action) => {\n  const {username, post, upvotes, downvotes, timestamp, id} = action;\n  switch(action.type){\n    case c.ADD_POST:\n      const currentTime = Date.now();\n      const formattedTime =  new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit'}).format(currentTime);\n      \n      return Object.assign({}, state, {\n        [id]: {\n          id: id,\n          username: username,\n          post: post,\n          upvotes: 0,\n          downvotes: 0,\n          timestamp: formattedTime\n        }\n      });\n\n      case c.UPVOTE_POST:\n        const newUpvoteState = { ...state };\n        let voteUp = newUpvoteState[id].upvotes + 1;\n      \n        return Object.assign({} , state, {\n          [id]:  {\n            id: id,\n            username: username,\n            post: post,\n            downvotes: downvotes,\n            timestamp: timestamp,\n            upvotes: voteUp\n          },\n        });\n     case c.DOWNVOTE_POST:\n       const newDownvoteState = { ...state };\n       let voteDown = newDownvoteState[id].downvotes -1;\n\n       return Object.assign({} , state, {\n         [id]: {\n           id: id,\n           username: username,\n           post: post,\n           downvotes: voteDown,\n           timestamp: timestamp,\n           upvotes: upvotes\n          },\n        });\n      case c.DELETE_POST:\n        const newState = { ...state };\n        delete newState[id];\n        return newState;\n\n    default:\n      return state;\n  }\n};\n\n","import * as c from './../actions/ActionTypes';\n\nexport default (state = null, action) => {\n  const {username, post, upvotes, downvotes, timestamp, id} = action;\n  switch (action.type){\n    case c.SELECT_POST:\n      if(state === null) {\n        return {\n            id: id,\n            username: username,\n            post: post,\n            downvotes: downvotes,\n            timestamp: timestamp,\n            upvotes: upvotes\n          }\n      } else {\n        state = null;\n        return state\n        }\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport rootReducer from './reducers/index';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(rootReducer);\nstore.subscribe(() =>\n console.log(store.getState())\n); \n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}